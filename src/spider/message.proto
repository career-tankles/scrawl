
package message;

message dns_entity_t {
    enum DNS_STATE {
            DNS_STATE_OK = 0;
            DNS_STATE_ERROR = 1;
    }
    required string host = 1;               // 主机名
    optional DNS_STATE state = 2 ;          // 状态
    optional int32 resolve_time = 3;        // 时间
    optional string official_name = 4;      // 正式名称
    repeated string ip = 5;                 // ip地址
    repeated string alias = 6;              // 别名
    optional int32 last_used_ip = 7 [default = 0]; // 指向使用ip
};

message uri_t {
    optional string scheme = 1 [default = "http"];
    optional string host = 2;
    optional uint32 port  = 3;
    optional string path = 4  [default = "/" ] ;
    optional string params = 5;
}

message res_list_t {
    repeated string uri_path = 1;
    repeated uri_t uri = 2;
}

message robots_item_t {
    optional string user_agent = 1;     // User-Agent
    repeated string disallows = 2;  
    repeated string allows = 3;
}

message robots_entity_t {
    repeated robots_item_t txt = 1;
    optional uint32 time = 2;
}

message site_t {

    required string host = 1;
    optional uint32 port = 2 [ default = 80 ];
    
    optional bool is_dns_ready = 3;
    optional dns_entity_t dns_info = 4;                 // DNS信息
    optional uint32 dns_next_ip_index = 5;              // 调度抓取过程中轮训IP地址的计数
    
    optional bool is_robots_ready = 6;                  // 是否禁用robots检测
    optional robots_entity_t robots_info = 7;           // robots.txt
    
    optional uint32 fetch_interval = 8 [default = 30];  // 抓取周期
    optional uint32 last_fetch_time = 9 [default = 0];  // 上次抓取时间(time_t：秒数)

    optional res_list_t ready_list = 10;		        // 就绪列表
    //optional res_list_t dns_waiting_list = 11;	    // 等待DNS解析时
	
	optional int64 userdata = 12;						// 可以存储指针，指向自定义数据结构
}

// 网页请求
message http_request_t {
        required string ip = 1;                                 // IP
        required int32  port = 2 [ default = 80 ];              // PORT
        required int32 submit_time = 3;                         // 抓取数据所用时间
        required string url = 4 ;                               // PORT
        required string http_request_data = 5;                  // HTTP请求(HTTP 协议)
        optional string userdata = 6;                           // 用户数据
        optional int32 conn_timeout = 7 [default = 100 ];
        optional int32 recv_timeout = 8 [default = 1000];
};


// 网页结果
message http_result_t {

        enum HTTP_PAGE_STATE {
                HTTP_PAGE_OK = 0;
                HTTP_PAGE_ERROR = 1;
        }

        required string url = 1;                                // URL
        optional int32 submit_time = 2;                         // 请求提交时间
        optional int32 write_end_time = 3;                      // 写结束时间
        optional int32 recv_begin_time = 4;                     // 开始时间
        optional int32 recv_end_time = 5;                       // 抓取数据结束时间
        optional string scrawltime = 6;                         // human-readable timestamp
        optional HTTP_PAGE_STATE state = 7 [ default = HTTP_PAGE_OK] ; // 状态
        optional string fetch_ip = 8;                           // 抓取IP地址
        optional string userdata = 9;                           // 提交的用户数据
        optional bytes http_page_data = 10;                     // 网页数据
        optional int32 http_page_data_len = 11;                 // 网页数据长度
};


/********************************************************

// protoc --cpp_out=. dns.proto
// g++ dns_main.cc dns.pb.cc -I/usr/local/protobuf-2.5.0/include -lprotoc -L/usr/local/protobuf-2.5.0/lib

// filename: dns_main.cc

#include <iostream>
#include <string>
#include "dns.pb.h"    
int main() {    
    dns::dns_entity_t dns_;
    dns_.set_host("www.baidu.com");
    dns_.set_state(dns::dns_entity_t::DNS_STATE_OK);
    dns_.set_resolve_time(1039939);
    std::string* ip1 = dns_.add_ip();
    *ip1 = "127.0.0.1";
    std::string* ip2 = dns_.add_ip();
    *ip2 = "127.0.0.2";

    std::cerr<<dns_.host()<<std::endl;
    std::cerr<<dns_.state()<<std::endl;
    std::cerr<<dns_.resolve_time()<<std::endl;
    if(dns_.has_official_name())
        std::cerr<<dns_.official_name()<<std::endl;

    for (int j = 0; j < dns_.ip_size(); j++) {
        const std::string& ip = dns_.ip(j);
        std::cerr<<ip<<std::endl;
    }

    for (int i=0; i<dns_.alias_size(); i++) {
        const std::string& alias = dns_.alias(i);
        std::cerr<<alias<<std::endl;
    }

    return 0;
}
************************************************
Parsing and Serialization

Finally, each protocol buffer class has methods for writing and reading messages of your chosen type using the protocol buffer binary format. These include:
bool SerializeToString(string* output) const;: serializes the message and stores the bytes in the given string. Note that the bytes are binary, not text; we only use the string class as a convenient container.
bool ParseFromString(const string& data);: parses a message from the given string.
bool SerializeToOstream(ostream* output) const;: writes the message to the given C++ ostream.
bool ParseFromIstream(istream* input);: parses a message from the given C++ istream.

*********************************************************/



